package ${packageName}.service;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Date;
import cn.hutool.core.util.StrUtil;
import com.ruoyi.common.enums.DelFlagEnum;
import com.ruoyi.common.exception.ServiceException;
import org.springframework.transaction.annotation.Transactional;
import cn.hutool.core.util.IdUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import java.util.List;
import com.ruoyi.common.utils.bean.BeanValidators;
import ${packageName}.domain.${ClassName};
import java.util.List;
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
            #break
        #end
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import javax.validation.Validator;
import com.ruoyi.common.utils.StringUtils;
/**
 * ${functionName}Service接口
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@Service
public class ${ClassName}Service extends ServiceImpl<${ClassName}Mapper, ${ClassName}> {

    @Autowired
    private ${ClassName}Mapper ${className}Mapper;
    @Autowired
    protected Validator validator;
    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}){
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("id", id);
        queryWrapper.eq("del_flag", DelFlagEnum.DEL_NO.getCode());
        return ${className}Mapper.selectOne(queryWrapper);
    }


    /**
     * 根据ids查询${functionName}
     *
     * @param ${pkColumn.javaField}s ${functionName} IDs
     * @return ${functionName}
     */
    public List<${ClassName}> select${ClassName}ByIds(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("del_flag", DelFlagEnum.DEL_NO.getCode());
        queryWrapper.in("${pkColumn.javaField}", Arrays.asList(${pkColumn.javaField}s));
        return ${className}Mapper.selectList(queryWrapper);
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}){
        QueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        return ${className}Mapper.select(queryWrapper);
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public ${ClassName} insert${ClassName}(${ClassName} ${className}){
        ${className}.setId(IdUtil.simpleUUID());
        ${className}.setDelFlag(DelFlagEnum.DEL_NO.getCode());
        ${className}Mapper.insert(${className});
        return ${className};
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public ${ClassName} update${ClassName}(${ClassName} ${className}){
        if(StringUtils.isEmpty(${className}.getId())){
            throw new ServiceException("修改失败，数据主键id缺失");
        }
        ${className}Mapper.updateById(${className});
        return ${className};
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键集合
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s){
        List<${ClassName}> ${className}s = new ArrayList<>();
        for (String ${pkColumn.javaField} : ${pkColumn.javaField}s) {
            ${ClassName} ${className} = new ${ClassName}();
            ${className}.setId(${pkColumn.javaField});
            ${className}.setDelFlag(DelFlagEnum.DEL_YES.getCode());
            ${className}s.add(${className});
        }
        return super.updateBatchById(${className}s) ? 1 : 0;
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}){
        ${ClassName} ${className} = new ${ClassName}();
        ${className}.setId(${pkColumn.javaField});
        ${className}.setDelFlag(DelFlagEnum.DEL_YES.getCode());
        return ${className}Mapper.updateById(${className});
    }

    public QueryWrapper<${ClassName}> getQueryWrapper(${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        if (${className} != null) {
            ${className}.setDelFlag(DelFlagEnum.DEL_NO.getCode());
            queryWrapper.eq("del_flag",${className}.getDelFlag());
            #foreach($column in $columns)
            #set($queryType=$column.queryType)
            #set($javaField=$column.javaField)
            #set($javaType=$column.javaType)
            #set($columnName=$column.columnName)
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #if($column.query)
            #if($column.javaType == "String")
            //$column.columnComment
            if (StrUtil.isNotEmpty(${className}.get$AttrName())) {
            #elseif($column.javaType != "String")
            //$column.columnComment
            if (${className}.get$AttrName() != null) {
            #end
            #if($column.queryType == "EQ")
                queryWrapper.eq("$columnName",${className}.get$AttrName());
            #elseif($queryType == "NE")
                queryWrapper.ne("$columnName",${className}.get$AttrName());
            #elseif($queryType == "GT")
                queryWrapper.gt("$columnName",${className}.get$AttrName());
            #elseif($queryType == "GTE")
                queryWrapper.ge("$columnName",${className}.get$AttrName());
            #elseif($queryType == "LT")
                queryWrapper.lt("$columnName",${className}.get$AttrName());
            #elseif($queryType == "LTE")
                queryWrapper.le("$columnName",${className}.get$AttrName());
            #elseif($queryType == "LIKE")
                queryWrapper.like("$columnName",${className}.get$AttrName());
            #elseif($queryType == "BETWEEN")
            #end
            }
                #end
            #end
        }
        queryWrapper.orderByDesc("create_time");
        return queryWrapper;
    }

    /**
     * 数据导入实现
     * @param ${className}List 模板数据
     * @param updateSupport 是否更新已经存在的数据
     * @param operName 操作人姓名
     * @return
     */
    public String importData(List<${ClassName}> ${className}List, boolean updateSupport, String operName) {
        if (StringUtils.isNull(${className}List) || ${className}List.size() == 0) {
            throw new ServiceException("导入数据不能为空！");
        }
        int successNum = 0;
        int failureNum = 0;
        StringBuilder successMsg = new StringBuilder();
        StringBuilder failureMsg = new StringBuilder();
        for (${ClassName} ${className} : ${className}List) {
            if(null==${className}){
                throw new RuntimeException("导入数据模板不正确，请重新选择");
            }
            try {
                //根据唯一属性获取对应数据（自己修改）
                ${ClassName} u = null;
                //如果查询不到直接添加数据
                if (StringUtils.isNull(u)) {
                    BeanValidators.validateWithException(validator, ${className});
                    ${className}.setId(IdUtil.simpleUUID());
                    ${className}.setCreateBy(operName);
                    ${className}.setCreateTime(new Date());
                    ${className}.setDelFlag(DelFlagEnum.DEL_NO.getCode());
                    ${className}Mapper.insert(${className});
                    successNum++;
                } else if (updateSupport) {
                    BeanValidators.validateWithException(validator, ${className});
                    //todo 验证
                    //int count = ${className}Mapper.checkCode(${className});
                    //if(count>0){//判断是否重复
                        //failureNum++;
                        //failureMsg.append("<br/>" + failureNum + "、第"+failureNum+"行数据导入失败，数据重复；");
                    //}else{
                        ${className}.setId(u.getId());
                        ${className}.setUpdateBy(operName);
                        ${className}.setUpdateTime(new Date());
                        ${className}Mapper.updateById(${className});
                        successNum++;
                    //}
                } else {
                    failureNum++;
                    failureMsg.append("<br/>" + failureNum + "、第"+failureNum+"行数据导入失败，数据重复；");
                }
            } catch (Exception e) {
                failureNum++;
                String msg = "<br/>" + failureNum + "、第"+failureNum+"行数据导入失败：";
                failureMsg.append(msg + e.getMessage());
                log.error(msg, e);
            }
        }
        if (failureNum > 0) {
            failureMsg.insert(0, "很抱歉，导入失败！共 " + failureNum + " 条数据格式不正确，错误如下：");
            throw new ServiceException(failureMsg.toString());
        } else {
            successMsg.insert(0, "恭喜您，数据已全部导入成功！共 " + successNum + " 条。");
        }
        return successMsg.toString();
    }
}
